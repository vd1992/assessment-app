{"version":3,"sources":["components/OrderCard.js","components/Search.js","components/Toggle.js","App.js","reportWebVitals.js","index.js"],"names":["OrderCard","props","useState","workerInfo","setWorker","cardMount","a","fetch","workerId","response","json","worker","useEffect","getWorker","className","id","src","image","name","companyName","email","date","adjustedDate","Date","toLocaleString","dateChange","deadline","Search","number","setNumber","htmlFor","type","value","onChange","event","target","nameFilter","placeholder","minimum","max","min","Toggle","onClick","changeDirection","direction","App","ordersArray","setOrdersArray","didMount","listDirection","setDirection","ordersBackup","setBackup","backup","slice","workOrdersPromise","fetchWorkOrdersJSON","then","data","holder","orders","sort","b","listOrders","map","order","description","nanoid","num","resultsArray","objects","push","reverse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":";6PAkDeA,MA/Cf,SAAmBC,GAAO,MAKUC,mBAAS,IALnB,mBAKfC,EALe,KAKHC,EALG,OAMQF,oBAAS,GANjB,mBAMfG,EANe,iDAStB,8BAAAC,EAAA,sEAC2BC,MAAM,+CAAiDN,EAAMO,UADxF,cACUC,EADV,gBAEyBA,EAASC,OAFlC,OAEUC,EAFV,OAGIP,EAAUO,EAAOA,QAHrB,4CATsB,sBA+BtB,OA/BsB,KAgBtBC,qBAAU,YAhBY,mCAiBlBC,KAED,CAACR,IAaA,sBAAKS,UAAU,OAAf,UACI,6CAAgBb,EAAMc,MACtB,sBAAKD,UAAU,cAAf,UACI,qBAAKE,IAAKb,EAAWc,QACrB,sBAAKH,UAAU,mBAAf,UACI,4BAAIX,EAAWe,OACf,4BAAIf,EAAWgB,cACf,4BAAIhB,EAAWiB,cAGvB,4BAnBW,SAASC,GAExB,IAAIC,EAAe,IAAIC,KAAU,IAALF,GAE5B,OADAC,EAAaA,EAAaE,iBAgBlBC,CAAWxB,EAAMyB,gBCHlBC,MAxCf,SAAgB1B,GAAM,MAIUC,mBAAS,GAJnB,mBAIX0B,EAJW,KAIHC,EAJG,KAelB,OAEQ,qBAAKf,UAAU,SAAf,SACI,iCAEI,uBAAOA,UAAW,eAAegB,QAAQ,QAAzC,0CAIA,uBACIC,KAAK,SACLhB,GAAG,aACHG,KAAK,SACLc,MAAOJ,EACPK,SArBC,SAASC,GAE1BL,EAAUK,EAAMC,OAAOH,OACvB/B,EAAMmC,WAAWF,EAAMC,OAAOH,QAmBdK,YAAY,KACZC,QAAQ,IACRC,IAAI,IACJC,IAAI,YCjBbC,MAhBf,SAAgBxC,GAIZ,OACI,8BAEI,wBAAQa,UAAU,SAAS4B,QAASzC,EAAM0C,gBAA1C,SACK1C,EAAM2C,e,OCoHRC,MAjHf,WAAe,MAOyB3C,mBAAS,IAPlC,mBAON4C,EAPM,KAOOC,EAPP,OAQgB7C,oBAAS,GARzB,mBAQN8C,EARM,aASyB9C,mBAAS,kBATlC,mBASN+C,EATM,KASSC,EATT,OAUqBhD,mBAAS,IAV9B,mBAUNiD,EAVM,KAUQC,EAVR,KAaPC,EAAQF,EAAaG,QAbd,4CAgBb,8BAAAhD,EAAA,sEACyBC,MAAM,mDAD/B,cACQE,EADR,gBAEkCA,EAASC,OAF3C,cAEQ6C,EAFR,yBAGSA,GAHT,4CAhBa,sBAuBb3C,qBAAU,YAvBG,2CAwBX4C,GAAsBC,MAAK,SAAAC,GAED,IAAIC,EAASD,EAAKE,OAClBD,EAASA,EAAOE,MAAK,SAASvD,EAAEwD,GAAI,OAAOxD,EAAEoB,SAAWoC,EAAEpC,YAC1DqB,EAAeY,GACfP,EAAUO,QAInC,CAACX,IAGJ,IA+CMe,EAAajB,EAAYkB,KAAI,SAAAC,GAAK,OAEpC,cAAC,EAAD,CACElD,GAAIkD,EAAMlD,GACVG,KAAM+C,EAAM/C,KACZgD,YAAaD,EAAMC,YACnBxC,SAAUuC,EAAMvC,SAChBlB,SAAUyD,EAAMzD,UACX,UAAY2D,kBAMvB,OACE,sBAAKrD,UAAU,YAAf,UACE,cAAC,EAAD,CACEsB,WAzCa,SAASgC,GAE1B,GAAQ,GAALA,EACDrB,EAAeM,OAKb,CACF,IADE,EACEgB,EAAa,GADf,cAEiBhB,GAFjB,IAEF,IAAI,EAAJ,qBAA0B,CAAC,IAAnBiB,EAAkB,QAErBF,GAAKE,EAAQ9D,UACd6D,EAAaE,KAAKD,IALpB,8BAUFvB,EAAesB,OAyBf,cAAC,EAAD,CACE1B,gBAnEkB,WAItB,IAAIgB,EAASb,EAAYQ,QACzBK,EAASA,EAAOa,UAChBzB,EAAeY,GAIbT,EADmB,kBAAlBD,EACY,iBAGA,kBAuDXL,UAAWK,IAEb,qBAAKnC,UAAU,cAAf,SACGiD,QC5GMU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IAASC,SAASC,eAAe,SAOnCX,M","file":"static/js/main.453f9d9a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"; \r\n\r\n\r\nfunction OrderCard(props) {\r\n\r\n    //render the work order cards here\r\n\r\n    //set initial state hooks, workerInfo collects info from a specific id, whereas cardMount is for controlling useEffect\r\n    const [workerInfo, setWorker] = useState(\"\");\r\n    const [cardMount, setMount] = useState(true);\r\n\r\n    //run fetch on url using id passed in as props, obtain json response then set state filling the returned worker info\r\n    async function getWorker(){\r\n        const response = await fetch('https://api.hatchways.io/assessment/workers/' + props.workerId);\r\n        const worker = await response.json();\r\n        setWorker(worker.worker);\r\n    }\r\n\r\n    //call the fetch on mount, only when I want to\r\n    useEffect(() => {\r\n        getWorker()\r\n        \r\n    }, [cardMount]\r\n    )\r\n\r\n    //change time from epoch to normal time, takes in the props deadline and returns it adjusted\r\n    const dateChange = function(date){\r\n        //multiply by 1000 to go from seconds to milliseconds since the expected argument is in milliseconds\r\n        let adjustedDate = new Date(date*1000);\r\n        adjustedDate=adjustedDate.toLocaleString();\r\n        return adjustedDate;\r\n    }\r\n\r\n    //render the individual work orders, passing in props to fill in info, in one case calling a function to adjust what to display\r\n    return (\r\n        <div className=\"card\">\r\n            <h2>Work Order {props.id}</h2>\r\n            <div className=\"worker-data\">\r\n                <img src={workerInfo.image}></img>\r\n                <div className=\"worker-text-data\">\r\n                    <p>{workerInfo.name}</p>\r\n                    <p>{workerInfo.companyName}</p>\r\n                    <p>{workerInfo.email}</p>\r\n                </div>\r\n            </div>\r\n            <p>{dateChange(props.deadline)}</p>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default OrderCard;\r\n","import React, { useEffect, useState } from \"react\"; \r\n\r\nfunction Search(props){\r\n\r\n    //search bar component for filter results in the parent component\r\n    //define state for the number used in the form\r\n    const [number, setNumber] = useState(0);\r\n\r\n    //on change in the form input, this function is run\r\n    //taking the event target value, it both updates component state and gives a paramater to the function passed in as props to trigger filter in parent component\r\n    const handleChange = function(event){\r\n    \r\n        setNumber(event.target.value);\r\n        props.nameFilter(event.target.value);\r\n    }\r\n\r\n    //render the form, collects numbers\r\n    return(\r\n\r\n            <div className=\"search\">\r\n                <form>\r\n                    \r\n                    <label className =\"search-label\" htmlFor=\"input\">\r\n                            Search by ID, 0 filters none\r\n                    </label>\r\n                    \r\n                    <input\r\n                        type=\"number\"\r\n                        id=\"name-input\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        onChange={handleChange}\r\n                        placeholder=\"Id\"\r\n                        minimum=\"0\"\r\n                        max=\"4\"\r\n                        min=\"0\"\r\n                    />\r\n                </form>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n\r\n","import React from \"react\"; \r\n\r\nfunction Toggle(props){\r\n\r\n    //toggle component is a button that on click activates the function passed in as props\r\n    //the other prop is the direction state passed in, indicating the deadline order\r\n    return(\r\n        <div>\r\n\r\n            <button className=\"button\" onClick={props.changeDirection}>\r\n                {props.direction}\r\n            </button>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Toggle;\r\n\r\n","import { useEffect } from 'react';\nimport React, { useState } from \"react\"; \nimport './App.css';\n\n//import components\nimport OrderCard from './components/OrderCard'; \nimport Search from './components/Search';\nimport Toggle from './components/Toggle';\n\n//nanoid for generating unique keys\nimport { nanoid } from \"nanoid\";\n\n\nfunction App() {\n\n  //set hooks for various purposes\n  //ordersArray is what rendering is based off of, it changes\n  //didMount is to ensure useeffect only goes off when I want it to, preventing infinite loops\n  //listDirection controls ascending/early first or descending/later first deadlines\n  //ordersBackup is to have a copy of the json array that is to not change at all, storing the original data\n  const [ordersArray, setOrdersArray] = useState([]);\n  const [didMount, setMount] = useState(true);\n  const [listDirection, setDirection] = useState(\"Now Ascending\"); \n  const [ordersBackup, setBackup] = useState([]); \n  \n  //cloned backup to doubly ensure backup does not change\n  const backup= ordersBackup.slice();\n\n  //run fetch, yield some promise of results to call\n  async function fetchWorkOrdersJSON() {\n    const response = await fetch('https://api.hatchways.io/assessment/work_orders');\n    const workOrdersPromise = await response.json();  \n    return workOrdersPromise;\n  }\n\n  //run on load once, calls the function then does stuff with the returned promise\n  useEffect(() => {\n    fetchWorkOrdersJSON().then(data => {\n                              //grabs the order part of the JSON response, then sort in ascending order for default, then store it in the hooks\n                              let holder = data.orders;\n                              holder = holder.sort(function(a,b) {return a.deadline - b.deadline});\n                              setOrdersArray(holder);\n                              setBackup(holder);\n                            }\n                            ) \n \n  }, [didMount])\n\n  //function to toggle the direction of the cards loaded\n  const changeDirection = function(){\n\n    //cloning to new array then reversing to assign, needed as it won't recognize a change and re-render by simply reversing the old state\n    //reverses the direction of the ordersArray\n    let holder = ordersArray.slice();\n    holder = holder.reverse();\n    setOrdersArray(holder);\n\n    //swap text for direction state\n    if(listDirection === \"Now Ascending\"){\n      setDirection(\"Now Descending\");\n    }\n    else{\n      setDirection(\"Now Ascending\");\n    }\n  \n  }\n\n  //filter based off a worker id passed in\n  //non-strict comparisons intentional, as a number in string or number form is identical for this case\n  //!\n  //doing the right way to filter may require substantial reworking of code and my assignment, would take too long, so I implemented a different filter just to have one\n  //!\n  const nameFilter = function(num){\n    //if the selected id is 0, no filtering is done, reset ordersArray to default using the backup\n    if(num==0){\n      setOrdersArray(backup);\n    }\n\n    //running through backup as objectsArray will be changing\n    //compare num passed in to object's number, adding to array if match\n    else{\n      let resultsArray=[];\n      for(let objects of backup){\n       \n        if(num==objects.workerId){\n          resultsArray.push(objects);\n        }\n        \n      }\n      //set ordersArray to the result post filtering, trigger re-render\n      setOrdersArray(resultsArray);\n    }\n  }\n\n  //generate the props of cards to display\n  //use mapping method to run through each array element then pass info from it in as props\n  const listOrders = ordersArray.map(order => (\n\n      <OrderCard\n        id={order.id}\n        name={order.name}\n        description={order.description}\n        deadline={order.deadline}\n        workerId={order.workerId}\n        key={\"unique-\" + nanoid()}\n      />\n    )\n  )\n\n  //render the components, and the array of components \n  return (\n    <div className=\"app-whole\">\n      <Search\n        nameFilter={nameFilter}\n      />\n      <Toggle\n        changeDirection={changeDirection}\n        direction={listDirection}\n      />\n      <div className=\"card-holder\">\n        {listOrders}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}